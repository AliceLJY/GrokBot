@namespace GrokBot.Shared
@using GrokBot.Models
@using GrokBot.Services
@inject ChatStorageService ChatStorage
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="nav-container">
    <div class="navbar-brand">
        <h3>GrokBot</h3>
        <button class="new-chat-btn" @onclick="CreateNewChat">
            <span class="oi oi-plus"></span> New Chat
        </button>
    </div>

    <div class="chat-list">
        @if (chats == null)
        {
            <p><em>Loading...</em></p>
        }
        else if (!chats.Any())
        {
            <p><em>No chats yet. Start a new conversation!</em></p>
        }
        else
        {
            @foreach (var chat in chats.OrderByDescending(c => c.CreatedAt))
            {
                <div class="chat-item @(IsActive(chat.Id) ? "active" : "")" @onclick="() => NavigateToChat(chat.Id)">
                    <div class="chat-title">@chat.Title</div>
                    <div class="chat-actions">
                        <button class="btn btn-sm btn-delete" @onclick:stopPropagation="true" @onclick="() => DeleteChatAsync(chat.Id)">
                            <span class="oi oi-trash"></span>
                        </button>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    private List<Chat>? chats;
    private bool isGitHubPages => NavigationManager.BaseUri.Contains("github.io");
    
    protected override async Task OnInitializedAsync()
    {
        await LoadChats();
    }

    private async Task LoadChats()
    {
        chats = await ChatStorage.GetAllChatsAsync();
    }

    private async Task CreateNewChat()
    {
        var newChat = new Chat
        {
            Title = $"New Chat {DateTime.Now.ToString("g")}"
        };

        await ChatStorage.SaveChatAsync(newChat);
        await LoadChats();
        NavigateToChat(newChat.Id);
    }

    private void NavigateToChat(string chatId)
    {
        // 使用与聊天页面一致的导航方法，确保GitHub Pages环境下正常工作
        var chatUrl = $"chat/{chatId}";
        
        if (isGitHubPages)
        {
            // 在GitHub Pages环境下使用直接的路径导航
            JSRuntime.InvokeVoidAsync("eval", $@"
                try {{
                    var baseHref = document.querySelector('base').getAttribute('href') || '/';
                    var fullPath = baseHref + '{chatUrl}';
                    console.log('从侧边栏导航到聊天: ' + fullPath);
                    
                    // 优先使用完整的URL导航，避免相对路径问题
                    window.location.href = fullPath;
                }} catch(e) {{
                    console.error('导航错误:', e);
                    window.location.href = '/grokbot/{chatUrl}';
                }}
            ");
        }
        else
        {
            // 本地环境使用NavigationManager
            NavigationManager.NavigateTo($"/chat/{chatId}");
        }
    }

    // 修改后的删除方法，移除了 MouseEventArgs 参数
    private async Task DeleteChatAsync(string chatId)
    {
        // 确认是否删除
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this chat?");
        if (!confirmed) return;
        
        await ChatStorage.DeleteChatAsync(chatId);
        await LoadChats();
        
        // 如果我们正在查看被删除的聊天，返回主页
        var currentPath = NavigationManager.Uri.Split('/').LastOrDefault();
        if (currentPath == chatId)
        {
            if (isGitHubPages)
            {
                await JSRuntime.InvokeVoidAsync("window.location.href", "/grokbot/");
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
    }

    private bool IsActive(string chatId)
    {
        var url = NavigationManager.Uri;
        return url.EndsWith($"/chat/{chatId}");
    }
}

<style>
    .nav-container {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .navbar-brand {
        padding: 1rem;
        border-bottom: 1px solid #dee2e6;
    }

    .new-chat-btn {
        width: 100%;
        padding: 8px;
        background-color: #6c757d;
        color: white;
        border: none;
        border-radius: 4px;
        margin-top: 10px;
        cursor: pointer;
    }

    .new-chat-btn:hover {
        background-color: #5a6268;
    }

    .chat-list {
        flex: 1;
        overflow-y: auto;
        padding: 0.5rem;
    }

    .chat-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem;
        border-radius: 4px;
        margin-bottom: 0.5rem;
        cursor: pointer;
        border: 1px solid transparent;
    }

    .chat-item:hover {
        background-color: #f1f3f5;
    }

    .chat-item.active {
        background-color: #e9ecef;
        border-color: #ced4da;
    }

    .chat-title {
        flex: 1;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .chat-actions {
        display: flex;
        gap: 5px;
    }

    .btn-delete {
        background: none;
        border: none;
        color: #6c757d;
        cursor: pointer;
        padding: 2px 5px;
    }

    .btn-delete:hover {
        color: #dc3545;
    }
</style>
