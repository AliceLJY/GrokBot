@using GrokBot.Models

<div class="message-container @GetContainerClass()">
    <div class="message-avatar">
        @if (Message.Role.ToLower() == "user")
        {
            <div class="avatar user">ðŸ‘¤</div>
        }
        else
        {
            <div class="avatar assistant">ðŸ¤–</div>
        }
    </div>
    <div class="message-content">
        <div class="message-header">
            <div class="message-role">@GetFormattedRole()</div>
            <div class="message-time">@Message.Timestamp.ToString("g")</div>
        </div>
        <div class="message-text">
            @((MarkupString)FormatMessage(Message.Content))
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Message Message { get; set; } = new Message();

    private string GetContainerClass()
    {
        return Message.Role.ToLower() == "user" ? "user-message" : "assistant-message";
    }

    private string GetFormattedRole()
    {
        return Message.Role.ToLower() == "user" ? "You" : "GrokBot";
    }

    private string FormatMessage(string content)
    {
        // Very basic formatting for code blocks and new lines
        // A more robust solution would use a Markdown parser
        
        // Replace new lines with <br>
        content = content.Replace("\n", "<br>");
        
        // Basic code block formatting
        // Find content between ``` and replace with <pre><code>...</code></pre>
        var codeBlockRegex = new System.Text.RegularExpressions.Regex(@"```([\s\S]*?)```");
        content = codeBlockRegex.Replace(content, match => 
        {
            var code = match.Groups[1].Value;
            return $"<pre><code>{code}</code></pre>";
        });

        // Replace inline code with <code> elements
        var inlineCodeRegex = new System.Text.RegularExpressions.Regex(@"`([^`]+)`");
        content = inlineCodeRegex.Replace(content, "<code>$1</code>");
        
        return content;
    }
}

<style>
    .message-container {
        display: flex;
        margin-bottom: 16px;
        padding: 8px;
        border-radius: 8px;
    }

    .user-message {
        background-color: #f0f7ff;
    }

    .assistant-message {
        background-color: #f5f5f5;
    }

    .message-avatar {
        margin-right: 12px;
        flex-shrink: 0;
    }

    .avatar {
        width: 38px;
        height: 38px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 18px;
    }

    .avatar.user {
        background-color: #007bff;
        color: white;
    }

    .avatar.assistant {
        background-color: #6c757d;
        color: white;
    }

    .message-content {
        flex: 1;
    }

    .message-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 4px;
    }

    .message-role {
        font-weight: bold;
    }

    .message-time {
        font-size: 0.8rem;
        color: #6c757d;
    }

    .message-text {
        line-height: 1.5;
    }

    pre {
        background-color: #282c34;
        color: #abb2bf;
        padding: 12px;
        border-radius: 4px;
        overflow-x: auto;
    }

    code {
        font-family: monospace;
        background-color: #eee;
        padding: 2px 4px;
        border-radius: 3px;
    }

    pre code {
        background-color: transparent;
        padding: 0;
        border-radius: 0;
    }
</style>
